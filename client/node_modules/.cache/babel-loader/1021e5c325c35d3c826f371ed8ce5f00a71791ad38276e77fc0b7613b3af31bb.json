{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Walden Light\\\\Desktop\\\\cwaa\\\\cwaa\\\\client\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Card, Button, Row, Col } from 'react-bootstrap';\nimport { getMe, deleteClient } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeClientId } from '../utils/localStorage';\nimport { REMOVE_CLIENT } from '../utils/mutations';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [userData, setUserData] = useQuery(REMOVE_CLIENT);\n  const [deleteClient, {\n    error\n  }] = useMutation(REMOVE_CLIENT);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n  useQuery(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n        if (!token) {\n          return false;\n        }\n        const response = await getMe(token);\n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n        const user = await response.json();\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getUserData();\n  }, [userDataLength]);\n  const handleDeleteClient = async clientId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const response = await deleteClient(clientId, token);\n      const {\n        data\n      } = deleteClient();\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n      const updatedUser = await response.json();\n      setUserData(updatedUser);\n      removeClientId(clientId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LOADING...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Main, \"rJhA59zDZ93nNp80tkm6gDcgAl0=\", false, function () {\n  return [useQuery, useMutation, useQuery];\n});\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","Container","Card","Button","Row","Col","getMe","deleteClient","Auth","removeClientId","REMOVE_CLIENT","useMutation","useQuery","jsxDEV","_jsxDEV","Fragment","_Fragment","Main","_s","userData","setUserData","error","userDataLength","Object","keys","length","getUserData","token","loggedIn","getToken","response","ok","Error","user","json","err","console","handleDeleteClient","clientId","data","updatedUser","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Walden Light/Desktop/cwaa/cwaa/client/src/pages/Main.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Container,\n    Card,\n    Button,\n    Row,\n    Col\n} from 'react-bootstrap';\n\nimport { getMe, deleteClient } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeClientId } from '../utils/localStorage';\nimport { REMOVE_CLIENT } from '../utils/mutations';\nimport { useMutation, useQuery } from '@apollo/client';\n\n\nconst Main = () => {\n    const [userData, setUserData] = useQuery(REMOVE_CLIENT);\n    const [deleteClient, { error }] = useMutation(REMOVE_CLIENT);\n\n    // use this to determine if `useEffect()` hook needs to run again\n    const userDataLength = Object.keys(userData).length;\n\n    useQuery(() => {\n        const getUserData = async () => {\n            try {\n                const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n                if (!token) {\n                    return false;\n                }\n\n                const response = await getMe(token);\n\n                if (!response.ok) {\n                    throw new Error('something went wrong!');\n                }\n\n                const user = await response.json();\n                setUserData(user);\n            } catch (err) {\n                console.error(err);\n            }\n        };\n\n        getUserData();\n    }, [userDataLength]);\n\n    const handleDeleteClient = async (clientId) => {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n            return false;\n        }\n\n        try {\n            const response = await deleteClient(clientId, token);\n\n            const { data } = deleteClient();\n\n            if (!response.ok) {\n                throw new Error('something went wrong!');\n            }\n\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            removeClientId(clientId);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    // if data isn't here yet, say so\n    if (!userDataLength) {\n        return <h2>LOADING...</h2>;\n    }\n\n    return (\n        <>\n            <h1>Main</h1>\n        </>\n    );\n};\n\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}